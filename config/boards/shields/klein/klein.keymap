/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define NUM  1
#define FUN  2


&mt {
    quick-tap-ms = <100>;
    require-prior-idle-ms = <200>;
    flavor = "tap-preferred";
    tapping-term-ms = <180>;
};

/ {
    macros {
        degree_sym: degree_sym {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 40>,
                <&macro_wait_time 40>,
                <&macro_press>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp N2 &kp N4 &kp N8>,
                <&macro_pause_for_release>,
                <&macro_release>;

            tap-ms = <40>;
            wait-ms = <40>;
        };

        C_A_D: C_A_D {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LA(LC(DEL))>,
                <&macro_pause_for_release>,
                <&macro_release>;

            tap-ms = <100>;
            wait-ms = <100>;
        };

        TM: TM {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp N0 &kp N1 &kp N5 &kp N3>,
                <&macro_pause_for_release>,
                <&macro_release>;

            tap-ms = <40>;
            wait-ms = <40>;
        };

        CircleR: CircleR {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RALT>,
                <&macro_tap>,
                <&kp KP_N1 &kp KP_N6 &kp KP_N9>,
                <&macro_release>,
                <&macro_release>;

            tap-ms = <40>;
            wait-ms = <40>;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_capslock {
            bindings = <&caps_word>;
            key-positions = <13 16>;
            layers = <0>;
        };
    };
};

/ {
    behaviors {
        rpi: require_prior_idle {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            //          ------------------------------------------------------------------------------------------------------------
            //          |  Q  |  W  |  E   |  R   |  T   |                                           |  Y   |  U    |  I    |  O   |   P   |
            //          |  A  |  S  |  D   |  F   |  G   |                                           |  H   |  J    |  K    |  L   |   '   |
            //          |  Z  |  X  |  C   |  V   |  B   |                                           |  N   |  M    |  ,    |  .   |   /   |
            //                      | ESC  | SPC  |  TAB | C/A/D |                            | MUTE |  SPC |  BKSP |  DEL |

            bindings = <
&kp Q      &kp W      &kp E      &kp R     &kp T                                                              &kp Y            &kp U        &kp I       &kp O      &kp P
&kp A      &kp S      &kp D      &kp F     &kp G                                                              &kp H            &kp J        &kp K       &kp L      &kp SQT
&kp Z      &kp X      &kp C      &kp V     &kp B                                                              &kp N            &kp M        &kp COMMA   &kp DOT    &kp FSLH
            &mt LALT ESCAPE  &mt LGUI SPACE  &mt LCTRL TAB  &kp LC(LA(DEL))         &kp C_MUTE  &kp ENTER     &lt 1 SPACE      &lt 2 BSPC
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        Numrow {
            bindings = <
&kp N1     &kp N2  &kp N3  &kp N4  &kp N5                                                                 &kp N6      &kp N7        &kp N8       &kp N9     &kp N0
&kp GRAVE  &trans  &trans  &trans  &trans                                                                 &kp LEFT    &kp DOWN      &kp UP       &kp RIGHT  &kp SEMI
&kp LSHFT  &trans  &trans  &trans  &trans                                                                 &kp MINUS   &kp EQUAL     &kp LBKT     &kp RBKT   &mt RSHIFT BACKSLASH
                           &trans  &trans  &trans       &kp LC(LA(DEL))         &kp C_MUTE      &trans    &trans      &trans
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        Fun {
            bindings = <
&kp F1   &kp F2   &kp F3  &kp F4       &kp F5                                                        &kp F6                &kp F7                &kp F8                &kp F9        &kp F10
&kp F11  &kp F12  &trans  &trans       &bt BT_CLR                                                    &bt BT_SEL 0          &bt BT_SEL 1          &bt BT_SEL 2          &bt BT_SEL 3  &bt BT_SEL 4
&trans   &trans   &trans  &bootloader  &sys_reset                                                    &sys_reset            &bootloader           &trans                &trans        &trans
                          &trans       &trans      &trans     &kp LC(LA(DEL))         &kp C_MUTE     &trans          &trans                &trans
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp C_VOL_DN C_VOL_UP>;
        };
    };
};
